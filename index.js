// Generated by CoffeeScript 1.10.0
var Require, zipObject;

zipObject = require('lodash.zipobject');

Require = (function() {
  function Require(packages) {
    var nodeModulesName, packagesName;
    packagesName = this.makePackagesName(packages);
    nodeModulesName = this.makeNodeModulesName(packages);
    this.makeCollection(packagesName, nodeModulesName);
  }

  Require.prototype.makeNodeModulesName = function(files) {
    var file, i, len, results;
    results = [];
    for (i = 0, len = files.length; i < len; i++) {
      file = files[i];
      results.push(require(file));
    }
    return results;
  };

  Require.prototype.makeCollection = function(a, b) {
    return this.collection = zipObject(a, b);
  };

  Require.prototype.makePackagesName = function(files) {
    var concat, exclusive, five, four, i, len, one, packages, part, three, two;
    packages = [];
    one = function(arr) {
      if (arr.length === 1) {
        return true;
      }
    };
    two = function(arr) {
      if (arr.length === 2) {
        return true;
      }
    };
    three = function(arr) {
      if (arr.length === 3) {
        return true;
      }
    };
    four = function(arr) {
      if (arr.length === 4) {
        return true;
      }
    };
    five = function(arr) {
      if (arr.length === 5) {
        return true;
      }
    };
    exclusive = function(arr) {
      var exclusiveList;
      exclusiveList = ['gulp', 'grunt', 'broccoli', 'jquery'];
      if (exclusiveList.join('').match(arr[0])) {
        return true;
      }
    };
    concat = function(part) {
      return part[0].toUpperCase() + part.slice(1);
    };
    for (i = 0, len = files.length; i < len; i++) {
      part = files[i];
      part = part.split('-');
      if (one(part)) {
        packages.push(part[0]);
      } else if (exclusive(part)) {
        if (two(part)) {
          packages.push(part[1]);
        } else if (three(part)) {
          packages.push(part[1] + (concat(part[2])));
        } else if (four(part)) {
          packages.push(part[1] + (concat(part[2])) + (concat(part[3])));
        } else if (five(part)) {
          packages.push(part[1] + (concat(part[2])) + (concat(part[3])) + (concat(part[4])));
        }
      } else if (!exclusive(part)) {
        if (two(part)) {
          packages.push(part[0] + (concat(part[1])));
        } else if (three(part)) {
          packages.push(part[0] + (concat(part[1])) + (concat(part[2])));
        } else if (four(part)) {
          packages.push(part[0] + (concat(part[1])) + (concat(part[2])) + (concat(part[3])));
        } else if (five(part)) {
          packages.push(part[0] + (concat(part[1])) + (concat(part[2])) + (concat(part[3])) + (concat(part[4])));
        }
      }
    }
    return packages;
  };

  return Require;

})();

module.exports = (function() {
  var all, allModules, fs;
  fs = require('fs');
  allModules = fs.readdirSync('./node_modules').slice(1);
  all = new Require(allModules);
  return all.collection;
})();

module.exports.only = function(params) {
  var only;
  only = new Require(params);
  return only.collection;
};
